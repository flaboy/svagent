// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	agent.proto

It has these top-level messages:
	Frame
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FrameFlags int32

const (
	Frame_Data  FrameFlags = 0
	Frame_Open  FrameFlags = 1
	Frame_Close FrameFlags = 2
)

var FrameFlags_name = map[int32]string{
	0: "Data",
	1: "Open",
	2: "Close",
}
var FrameFlags_value = map[string]int32{
	"Data":  0,
	"Open":  1,
	"Close": 2,
}

func (x FrameFlags) String() string {
	return proto1.EnumName(FrameFlags_name, int32(x))
}
func (FrameFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Frame struct {
	Channel int64      `protobuf:"varint,1,opt,name=Channel" json:"Channel,omitempty"`
	Flag    FrameFlags `protobuf:"varint,2,opt,name=Flag,enum=proto.FrameFlags" json:"Flag,omitempty"`
	Body    []byte     `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto1.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Frame) GetChannel() int64 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *Frame) GetFlag() FrameFlags {
	if m != nil {
		return m.Flag
	}
	return Frame_Data
}

func (m *Frame) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto1.RegisterType((*Frame)(nil), "proto.Frame")
	proto1.RegisterEnum("proto.FrameFlags", FrameFlags_name, FrameFlags_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Agent_RegisterClient, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Register(ctx context.Context, opts ...grpc.CallOption) (Agent_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Agent_serviceDesc.Streams[0], c.cc, "/proto.Agent/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentRegisterClient{stream}
	return x, nil
}

type Agent_RegisterClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type agentRegisterClient struct {
	grpc.ClientStream
}

func (x *agentRegisterClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentRegisterClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Agent service

type AgentServer interface {
	Register(Agent_RegisterServer) error
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Register(&agentRegisterServer{stream})
}

type Agent_RegisterServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type agentRegisterServer struct {
	grpc.ServerStream
}

func (x *agentRegisterServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentRegisterServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Agent_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}

func init() { proto1.RegisterFile("agent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0x4f, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xad, 0x8c, 0x5c, 0xac,
	0x6e, 0x45, 0x89, 0xb9, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xce, 0x19, 0x89, 0x79, 0x79, 0xa9, 0x39,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x1a, 0x17, 0x8b, 0x5b, 0x4e, 0x62,
	0xba, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x10, 0xc4, 0x00, 0x3d, 0xb0, 0x2e, 0xbd, 0xb4,
	0x9c, 0xc4, 0xf4, 0xe2, 0x20, 0xb0, 0xbc, 0x90, 0x10, 0x17, 0x8b, 0x53, 0x7e, 0x4a, 0xa5, 0x04,
	0xb3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x98, 0xad, 0xa4, 0xc6, 0xc5, 0x0a, 0x56, 0x22, 0xc4, 0xc1,
	0xc5, 0xe2, 0x92, 0x58, 0x92, 0x28, 0xc0, 0x00, 0x62, 0xf9, 0x17, 0xa4, 0xe6, 0x09, 0x30, 0x0a,
	0x71, 0x72, 0xb1, 0x3a, 0xe7, 0xe4, 0x17, 0xa7, 0x0a, 0x30, 0x19, 0x19, 0x73, 0xb1, 0x3a, 0x82,
	0x5c, 0x27, 0xa4, 0xc5, 0xc5, 0x11, 0x94, 0x9a, 0x9e, 0x59, 0x5c, 0x92, 0x5a, 0x24, 0xc4, 0x83,
	0x6c, 0x95, 0x14, 0x0a, 0x4f, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0x2c, 0x60, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0x12, 0xf9, 0xe3, 0xd9, 0x00, 0x00, 0x00,
}
